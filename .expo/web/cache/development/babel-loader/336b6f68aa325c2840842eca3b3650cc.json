{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\80E502UKIN\\\\Desktop\\\\mcc\\\\new-on\\\\src\\\\components\\\\Hamza.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Constants from 'expo-constants';\nimport * as Location from 'expo-location';\nexport default function Hamza() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS === 'android' && !Constants.isDevice)) {\n                _context.next = 3;\n                break;\n              }\n\n              setErrorMsg('Oops, this will not work on Snack in an Android emulator. Try it on your device!');\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 5:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 10;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 10:\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 12:\n              location = _context.sent;\n              setLocation(location);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.paragraph,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, text));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  paragraph: {\n    fontSize: 18,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/80E502UKIN/Desktop/mcc/new-on/src/components/Hamza.jsx"],"names":["React","useState","useEffect","Constants","Location","Hamza","location","setLocation","errorMsg","setErrorMsg","Platform","OS","isDevice","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","text","JSON","stringify","styles","container","paragraph","StyleSheet","create","flex","alignItems","justifyContent","padding","fontSize","textAlign"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC9B,kBAAgCJ,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAgCN,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKQ,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6B,CAACR,SAAS,CAACS,QAD7C;AAAA;AAAA;AAAA;;AAEGH,cAAAA,WAAW,CACT,kFADS,CAAX;AAFH;;AAAA;AAAA;AAAA,+CAOwBL,QAAQ,CAACS,iCAAT,EAPxB;;AAAA;AAAA;AAOOC,cAAAA,MAPP,yBAOOA,MAPP;;AAAA,oBAQKA,MAAM,KAAK,SARhB;AAAA;AAAA;AAAA;;AASGL,cAAAA,WAAW,CAAC,0CAAD,CAAX;AATH;;AAAA;AAAA;AAAA,+CAasBL,QAAQ,CAACW,uBAAT,CAAiC,EAAjC,CAbtB;;AAAA;AAaKT,cAAAA,QAbL;AAcCC,cAAAA,WAAW,CAACD,QAAD,CAAX;;AAdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAgBD,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,MAAIU,IAAI,GAAG,WAAX;;AACA,MAAIR,QAAJ,EAAc;AACZQ,IAAAA,IAAI,GAAGR,QAAP;AACD,GAFD,MAEO,IAAIF,QAAJ,EAAc;AACnBU,IAAAA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCL,IAAhC,CADF,CADF;AAKD;AAED,IAAMG,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,OAAO,EAAE;AAJA,GADoB;AAO/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,SAAS,EAAE;AAFF;AAPoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Platform, Text, View, StyleSheet } from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport * as Location from 'expo-location';\r\n\r\nexport default function Hamza() {\r\n  const [location, setLocation] = useState(null);\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS === 'android' && !Constants.isDevice) {\r\n        setErrorMsg(\r\n          'Oops, this will not work on Snack in an Android emulator. Try it on your device!'\r\n        );\r\n        return;\r\n      }\r\n      let { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        setErrorMsg('Permission to access location was denied');\r\n        return;\r\n      }\r\n\r\n      let location = await Location.getCurrentPositionAsync({});\r\n      setLocation(location);\r\n    })();\r\n  }, []);\r\n\r\n  let text = 'Waiting..';\r\n  if (errorMsg) {\r\n    text = errorMsg;\r\n  } else if (location) {\r\n    text = JSON.stringify(location);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.paragraph}>{text}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 20,\r\n  },\r\n  paragraph: {\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}