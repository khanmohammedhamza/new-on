{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\80E502UKIN\\\\Desktop\\\\plswork\\\\new-on\\\\src\\\\components\\\\loginForm\\\\LoginForm.jsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport firebase from 'firebase';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Validator from 'email-validator';\n\nvar LoginForm = function LoginForm(_ref) {\n  var navigation = _ref.navigation;\n  var LoginFormSchema = yup.object().shape({\n    email: yup.string().email().required('An email is required'),\n    password: yup.string().required().min(6, 'Your password has to have at least 6 characters')\n  });\n\n  var onLogin = function onLogin(email, password) {\n    return _regeneratorRuntime.async(function onLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password));\n\n          case 3:\n            console.log('Firebase Login Successful', email, password);\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            Alert.alert(_context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var styles = StyleSheet.create({\n    wrapper: {\n      marginTop: 80\n    },\n    inputField: {\n      borderRadius: 4,\n      padding: 12,\n      backgroundColor: '#FAFAFA',\n      marginBottom: 10,\n      borderWidth: 1\n    },\n    button: function button(isValid) {\n      return {\n        backgroundColor: isValid ? '#0096f6' : '#9ACAF7',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: 42,\n        borderRadius: 4\n      };\n    },\n    buttonText: {\n      fontWeight: '600',\n      color: '#fff',\n      fontSize: 20\n    },\n    signupContainer: {\n      flexDirection: 'row',\n      width: '100%',\n      justifyContent: 'center',\n      marginTop: 50\n    }\n  });\n  return React.createElement(View, {\n    style: styles.wrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      onLogin(values.email, values.password);\n    },\n    validationSchema: LoginFormSchema,\n    validateOnMount: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: [styles.inputField, {\n        borderColor: values.email.length < 1 || Validator.validate(values.email) ? '#ccc' : 'red'\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, React.createElement(TextInput, {\n      placeholderTextColor: \"#444\",\n      placeholder: \"email\",\n      autoCapitalize: \"none\",\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      autoFocus: true,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: [styles.inputField, styles, {\n        borderColor: 1 > values.password.length || values.password.length >= 6 ? '#ccc' : 'red'\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, React.createElement(TextInput, {\n      placeholderTextColor: \"#444\",\n      placeholder: \"Password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: true,\n      textContentType: \"password\",\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    })), React.createElement(View, {\n      style: {\n        alignItems: 'flex-end',\n        marginBottom: 30\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#6BB0F5'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, \"Forgot password?\")), React.createElement(Pressable, {\n      titleSize: 20,\n      style: styles.button(isValid),\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.buttonText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, \"Log In\")), React.createElement(View, {\n      style: styles.signupContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \"Don't have an account?\"), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.push('SignupScreen');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: '#6BB0F5'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \" Sign Up\"))));\n  }));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["C:/Users/80E502UKIN/Desktop/plswork/new-on/src/components/loginForm/LoginForm.jsx"],"names":["React","useState","TouchableOpacity","firebase","Formik","yup","Validator","LoginForm","navigation","LoginFormSchema","object","shape","email","string","required","password","min","onLogin","auth","signInWithEmailAndPassword","console","log","Alert","alert","message","styles","StyleSheet","create","wrapper","marginTop","inputField","borderRadius","padding","backgroundColor","marginBottom","borderWidth","button","isValid","alignItems","justifyContent","minHeight","buttonText","fontWeight","color","fontSize","signupContainer","flexDirection","width","values","handleChange","handleBlur","handleSubmit","borderColor","length","validate","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, Text, TextInput, StyleSheet, Pressable, Alert } from 'react-native'\r\nimport { TouchableOpacity } from 'react-native-gesture-handler'\r\nimport firebase from 'firebase';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Validator from 'email-validator';\r\n\r\nconst LoginForm = ({ navigation }) => {\r\n    const LoginFormSchema = yup.object().shape({\r\n        email: yup.string().email().required('An email is required'),\r\n        password: yup.string()\r\n            .required()\r\n            .min(6, 'Your password has to have at least 6 characters'),\r\n    })\r\n\r\n    const onLogin = async (email, password) => {\r\n        try{\r\n            await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            console.log('Firebase Login Successful', email, password)\r\n        } catch (error) {\r\n            Alert.alert(error.message)\r\n        }\r\n    }\r\n    const styles = StyleSheet.create({\r\n        wrapper: {\r\n            marginTop: 80,\r\n        },\r\n        inputField: {\r\n            borderRadius: 4,\r\n            padding: 12,\r\n            backgroundColor: '#FAFAFA',\r\n            marginBottom: 10,\r\n            borderWidth: 1,\r\n        },\r\n        button: (isValid) => ({\r\n            backgroundColor: isValid ? '#0096f6' : '#9ACAF7',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            minHeight: 42,\r\n            borderRadius:4,\r\n        }),\r\n        buttonText: {\r\n            fontWeight: '600',\r\n            color: '#fff',\r\n            fontSize: 20,\r\n        },\r\n        signupContainer: {\r\n            flexDirection: 'row',\r\n            width: '100%',\r\n            justifyContent: 'center',\r\n            marginTop: 50,\r\n        },\r\n    })\r\n \r\n    return (\r\n        <View style={styles.wrapper}>\r\n            <Formik\r\n                initialValues={{email: '', password: ''}}\r\n                onSubmit={values => {\r\n                    onLogin(values.email, values.password)\r\n                }}\r\n                validationSchema={LoginFormSchema}\r\n                validateOnMount={true}\r\n            >\r\n             {({handleChange, handleBlur, handleSubmit, values, isValid}) => \r\n             (    \r\n             <>    \r\n            <View style={[styles.inputField,\r\n                {borderColor: values.email.length < 1 || Validator.validate(values.email) ? '#ccc' : 'red',}\r\n            ]}>\r\n                <TextInput \r\n                    placeholderTextColor='#444'\r\n                    placeholder='email'\r\n                    autoCapitalize='none'\r\n                    keyboardType='email-address'\r\n                    textContentType='emailAddress'\r\n                    autoFocus={true}\r\n                    onChangeText={handleChange('email')}\r\n                    onBlur={handleBlur('email')}\r\n                    value={values.email}\r\n                />                \r\n                </View>\r\n\r\n            <View style={[styles.inputField, styles,\r\n                {borderColor: 1 > values.password.length || values.password.length >= 6 ? '#ccc' : 'red',}\r\n            ]}>\r\n                <TextInput \r\n                    placeholderTextColor='#444'\r\n                    placeholder='Password'\r\n                    autoCapitalize='none'\r\n                    autoCorrect={false}\r\n                    secureTextEntry={true}\r\n                    textContentType='password'\r\n                    onChangeText={handleChange('password')}\r\n                    onBlur={handleBlur('password')}\r\n                    value={values.password}\r\n                />                \r\n                </View>\r\n                <View style={{ alignItems: 'flex-end', marginBottom: 30 }}>\r\n                    <Text style={{ color: '#6BB0F5' }}>Forgot password?</Text>\r\n                </View>\r\n\r\n            <Pressable \r\n                titleSize={20} \r\n                style={styles.button(isValid)} \r\n                onPress={handleSubmit}>\r\n                <Text style={styles.buttonText}>Log In</Text>\r\n            </Pressable>\r\n\r\n            <View style={styles.signupContainer}>\r\n                <Text>Don't have an account?</Text>\r\n                <TouchableOpacity onPress={() => navigation.push('SignupScreen')}>\r\n                    <Text style={{ color: '#6BB0F5' }}> Sign Up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            </>\r\n            )}\r\n        </Formik>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LoginForm\r\n"]},"metadata":{},"sourceType":"module"}