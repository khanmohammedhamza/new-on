{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\80E502UKIN\\\\Desktop\\\\plswork\\\\new-on\\\\src\\\\components\\\\Chatbot.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Card, Button } from 'react-native-elements';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\nimport { dialogflowConfig } from \"./env\";\n\nvar botAvatar = require(\"../../../assets/images/robot.png\");\n\nvar BOT = {\n  id_: 2,\n  name: 'Mr.Bot'\n};\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      messages: [{\n        _id: 1,\n        text: \"Hi! My name is Mr.Bot \\uD83E\\uDD16.\\n\\nI can help you set up an appoinment and also help you get information about coronavirus\",\n        createdAt: new Date(),\n        user: {\n          _id: 2,\n          name: 'FAQ Bot',\n          avatar: 'https://i.imgur.com/7k12EPD.png'\n        }\n      }]\n    };\n\n    _this.renderBubble = function (props) {\n      if (props.currentMessage.isOptions) {\n        return React.createElement(ScrollView, {\n          style: {\n            backgroundColor: 'white'\n          },\n          horizontal: true,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }\n        }, props.currentMessage.data.map(function (item) {\n          return React.createElement(Card, {\n            key: item.title,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }\n          }, React.createElement(Card.Image, {\n            style: {\n              width: 220,\n              height: 110\n            },\n            resizeMode: \"cover\",\n            source: {\n              uri: item.image\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }\n          }), React.createElement(Card.Divider, {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }\n          }), React.createElement(Card.Title, {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }\n          }, item.title), React.createElement(Card.Divider, {\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }\n          }), React.createElement(Button, {\n            title: \"Choose\",\n            style: {\n              height: 35\n            },\n            onPress: function onPress() {\n              return _this.sendBotResponse(item.title);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }\n          }));\n        }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dialogflow_V2.setConfiguration(dialogflowConfig.client_email, dialogflowConfig.private_key, Dialogflow_V2.LANG_ENGLISH_US, dialogflowConfig.project_id);\n    }\n  }, {\n    key: \"handleGoogleResponse\",\n    value: function handleGoogleResponse(result) {\n      var text = result.queryResult.fulfillmentMessages[0].text.text[0];\n      this.sendBotResponse(text);\n    }\n  }, {\n    key: \"sendBotResponse\",\n    value: function sendBotResponse(text) {\n      var msg;\n\n      if (text == 'travel') {\n        msg = {\n          _id: this.state.messages.length + 1,\n          text: 'Would you like to buy\\n a plane ticket?',\n          image: 'https://images.unsplash.com/photo-1583452924150-c86772c4fab6?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dHJhdmVsaW5nfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\n          createdAt: new Date(),\n          user: BOT\n        };\n      } else if (text == 'show options') {\n        msg = {\n          _id: this.state.messages.length + 1,\n          text: 'Please choose your destination. ',\n          createdAt: new Date(),\n          user: BOT,\n          quickReplies: {\n            type: 'radio',\n            keepIt: true,\n            values: [{\n              title: 'Thailand',\n              value: 'Thailand',\n              borderColor: '#A0522D'\n            }, {\n              title: 'USA',\n              value: 'USA',\n              borderColor: '#7b68EE'\n            }, {\n              title: 'Japan',\n              value: 'Japan',\n              borderColor: '#008B8B'\n            }]\n          }\n        };\n      } else {\n        msg = {\n          _id: this.state.messages.length + 1,\n          text: text,\n          createdAt: new Date(),\n          user: BOT\n        };\n      }\n\n      this.setState(function (previousState) {\n        return {\n          messages: GiftedChat.append(previousState.messages, [msg])\n        };\n      });\n    }\n  }, {\n    key: \"onSend\",\n    value: function onSend() {\n      var _this2 = this;\n\n      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.setState(function (previousState) {\n        return {\n          messages: GiftedChat.append(previousState.messages, messages)\n        };\n      });\n      var message = messages[0].text;\n      Dialogflow_V2.requestQuery(message, function (result) {\n        return _this2.handleGoogleResponse(result);\n      }, function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"onQuickReply\",\n    value: function onQuickReply(quickReply) {\n      var _this3 = this;\n\n      this.setState(function (previousState) {\n        return {\n          messages: GiftedChat.append(previousState.messages, quickReply)\n        };\n      });\n      var message = quickReply[0].value;\n      Dialogflow_V2.requestQuery(message, function (result) {\n        return _this3.handleGoogleResponse(result);\n      }, function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: '#fff'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      }, React.createElement(GiftedChat, {\n        messages: this.state.messages,\n        onSend: function onSend(messages) {\n          return _this4.onSend(messages);\n        },\n        onQuickReply: function onQuickReply(quickReply) {\n          return _this4.onQuickReply(quickReply);\n        },\n        user: {\n          _id: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/80E502UKIN/Desktop/plswork/new-on/src/components/Chatbot.jsx"],"names":["React","Component","Card","Button","GiftedChat","Dialogflow_V2","dialogflowConfig","botAvatar","require","BOT","id_","name","App","state","messages","_id","text","createdAt","Date","user","avatar","renderBubble","props","currentMessage","isOptions","backgroundColor","data","map","item","title","width","height","uri","image","sendBotResponse","setConfiguration","client_email","private_key","LANG_ENGLISH_US","project_id","result","queryResult","fulfillmentMessages","msg","length","quickReplies","type","keepIt","values","value","borderColor","setState","previousState","append","message","requestQuery","handleGoogleResponse","error","console","log","quickReply","flex","onSend","onQuickReply"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text, SafeAreaView, ScrollView } from 'react-native';\r\nimport { Card, Button } from 'react-native-elements';\r\n\r\nimport {GiftedChat} from 'react-native-gifted-chat';\r\nimport { Dialogflow_V2 } from 'react-native-dialogflow';\r\nimport { dialogflowConfig } from './env';\r\n\r\nconst botAvatar = require('../../../assets/images/robot.png');\r\n\r\nconst BOT = {\r\n    id_: 2,\r\n    name: 'Mr.Bot',\r\n    // avatar: botAvatar\r\n}\r\n\r\nexport default class App extends React.Component{\r\n\r\n    state = {\r\n        messages: [\r\n          {\r\n            _id: 1,\r\n            text: `Hi! My name is Mr.Bot 🤖.\\n\\nI can help you set up an appoinment and also help you get information about coronavirus`,\r\n            createdAt: new Date(),\r\n            user: {\r\n              _id: 2,\r\n              name: 'FAQ Bot',\r\n              avatar: 'https://i.imgur.com/7k12EPD.png'\r\n            }\r\n          }\r\n        ]\r\n      };\r\n\r\n      componentDidMount() {\r\n        Dialogflow_V2.setConfiguration(\r\n          dialogflowConfig.client_email,\r\n          dialogflowConfig.private_key,\r\n          Dialogflow_V2.LANG_ENGLISH_US,\r\n          dialogflowConfig.project_id\r\n        );\r\n      }\r\n\r\n      handleGoogleResponse(result) {\r\n        let text = result.queryResult.fulfillmentMessages[0].text.text[0];\r\n        this.sendBotResponse(text);\r\n    }\r\n    \r\n    sendBotResponse(text) {\r\n\r\n        let msg;\r\n\r\n        if (text == 'travel') {\r\n            msg = {\r\n                _id: this.state.messages.length + 1,\r\n                text: 'Would you like to buy\\n a plane ticket?',\r\n                image: 'https://images.unsplash.com/photo-1583452924150-c86772c4fab6?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8dHJhdmVsaW5nfGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&w=1000&q=80',\r\n                createdAt: new Date(),\r\n                user: BOT\r\n              };\r\n        } else if (text == 'show options') {\r\n            msg = {\r\n                _id: this.state.messages.length + 1,\r\n                text: 'Please choose your destination. ',\r\n                createdAt: new Date(),\r\n                user: BOT,\r\n                quickReplies: {\r\n                    type: 'radio',\r\n                    keepIt: true,\r\n                    values: [\r\n                        {title: 'Thailand', value: 'Thailand', borderColor: '#A0522D'},\r\n                        {title: 'USA', value: 'USA', borderColor: '#7b68EE'},\r\n                        {title: 'Japan', value: 'Japan', borderColor: '#008B8B'},\r\n                    ]\r\n                }\r\n              };\r\n        } else {\r\n            msg = {\r\n                _id: this.state.messages.length + 1,\r\n                text,\r\n                createdAt: new Date(),\r\n                user: BOT\r\n              };\r\n        }\r\n    \r\n        this.setState(previousState => ({\r\n          messages: GiftedChat.append(previousState.messages, [msg])\r\n        }));\r\n      }\r\n    \r\n      onSend(messages = []) {\r\n        this.setState(previousState => ({\r\n          messages: GiftedChat.append(previousState.messages, messages)\r\n        }));\r\n\r\n        let message = messages[0].text;\r\n        Dialogflow_V2.requestQuery(\r\n            message,\r\n            result => this.handleGoogleResponse(result),\r\n            error => console.log(error)\r\n    );\r\n      }\r\n\r\n      onQuickReply(quickReply) {\r\n        this.setState(previousState => ({\r\n            messages: GiftedChat.append(previousState.messages, quickReply)\r\n          }));\r\n  \r\n          let message = quickReply[0].value;\r\n          Dialogflow_V2.requestQuery(\r\n              message,\r\n              result => this.handleGoogleResponse(result),\r\n              error => console.log(error)\r\n      );\r\n      }\r\n\r\n      renderBubble = (props) => {\r\n        if(props.currentMessage.isOptions){\r\n          return (\r\n            <ScrollView style={{backgroundColor: 'white'}} horizontal={true}>\r\n              {props.currentMessage.data.map((item) => (\r\n                <Card key={item.title}>\r\n                  <Card.Image style={{width: 220, height: 110}} resizeMode='cover' source={{uri: item.image}}>\r\n                  </Card.Image>\r\n                  <Card.Divider />\r\n                  <Card.Title>{item.title}</Card.Title>\r\n                  <Card.Divider />\r\n                  <Button title='Choose' \r\n                    style={{height: 35}}\r\n                    onPress={() => this.sendBotResponse(item.title)}/>\r\n                </Card>\r\n              ))}\r\n            </ScrollView>\r\n          )\r\n        }\r\n        \r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <View style={{ flex: 1, backgroundColor: '#fff' }}>\r\n            <GiftedChat\r\n              messages={this.state.messages}\r\n              onSend={messages => this.onSend(messages)}\r\n              onQuickReply={(quickReply) => this.onQuickReply(quickReply)}\r\n              user={{\r\n                _id: 1\r\n              }}\r\n            />\r\n          </View>\r\n        );\r\n      }\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}